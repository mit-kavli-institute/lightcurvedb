from numpy import isnan
from psycopg2.extensions import AsIs, Float, register_adapter
from sqlalchemy import Column
from sqlalchemy.dialects import postgresql as psql
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.schema import CreateColumn


def high_precision_column(precision=None, asdecimal=False, **column_args):
    return Column(
        psql.DOUBLE_PRECISION(precision=precision, asdecimal=asdecimal),
        **column_args
    )


@compiles(CreateColumn, "postgresql")
def use_identity(element, compiler, **kw):
    text = compiler.visit_create_column(element, **kw)
    text = text.replace("SERIAL", "INT GENERATED BY DEFAULT AS IDENTITY")
    return text


def nan_safe_adapter(f):
    """
    Convert numpy NaN objects to "nan". SQLAlchemy emits np.NaN as unquoted
    nan strings, resulting in postgres looking for a column literally named
    "nan". Convert these to strings so postgres can safely cast the value.
    """
    if isnan(f):
        return AsIs("'NaN'")
    return Float(f)


register_adapter(float, nan_safe_adapter)
