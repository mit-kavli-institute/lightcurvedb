"""initializing lcdb models

Revision ID: c6e1baa7ce54
Revises: db7da31008c0
Create Date: 2022-11-17 16:54:43.755221

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.schema import CreateSequence, DropSequence, Sequence

from alembic import op

# revision identifiers, used by Alembic.
revision = "c6e1baa7ce54"
down_revision = "db7da31008c0"
branch_labels = None
depends_on = None


def define_sequences():
    return {
        "apertures": Sequence("apertures_id_seq"),
        "orbits": Sequence("orbit_id_seq"),
        "best_orbit_lightcurves": Sequence("best_orbit_lightcurves_id_seq"),
        "camera_quaternions": Sequence("camera_quaternions_id_seq"),
        "lightcurvetypes": Sequence("lightcurvetypes_id_seq"),
        "frames": Sequence("frames_id_seq"),
        "frametypes": Sequence("frametypes_id_seq"),
        "qlpoperations": Sequence("qlpoperations_id_seq"),
        "qlpprocesses": Sequence("qlpprocesses_id_seq"),
        "qlpstages": Sequence("qlpstages_id_seq"),
        "spacecraftephemeris": Sequence("spacecraftephemeris_id_seq"),
    }


def upgrade():
    # Create sequences
    sequence_map = define_sequences()
    for sequence in sequence_map.values():
        op.execute(CreateSequence(sequence))
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "apertures",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "id",
            sa.SmallInteger(),
            sequence_map["apertures"],
            server_default=sequence_map["apertures"].next_value(),
            nullable=False,
        ),
        sa.Column("star_radius", sa.Numeric(), nullable=False),
        sa.Column("inner_radius", sa.Numeric(), nullable=False),
        sa.Column("outer_radius", sa.Numeric(), nullable=False),
        sa.CheckConstraint(
            "char_length(name) >= 1", name="minimum_name_length"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("star_radius", "inner_radius", "outer_radius"),
    )
    op.create_table(
        "camera_quaternions",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "id",
            sa.Integer(),
            sequence_map["camera_quaternions"],
            server_default=sequence_map["camera_quaternions"].next_value(),
            nullable=False,
        ),
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column("camera", sa.SmallInteger(), nullable=False),
        sa.Column("w", postgresql.DOUBLE_PRECISION(), nullable=False),
        sa.Column("x", postgresql.DOUBLE_PRECISION(), nullable=False),
        sa.Column("y", postgresql.DOUBLE_PRECISION(), nullable=False),
        sa.Column("z", postgresql.DOUBLE_PRECISION(), nullable=False),
        sa.CheckConstraint(
            "camera IN (1, 2, 3, 4)", name="phys_camera_constraint"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("camera", "date"),
    )
    op.create_index(
        op.f("ix_camera_quaternions_camera"),
        "camera_quaternions",
        ["camera"],
        unique=False,
    )
    op.create_index(
        op.f("ix_camera_quaternions_date"),
        "camera_quaternions",
        ["date"],
        unique=False,
    )
    op.create_table(
        "frametypes",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "id",
            sa.SmallInteger(),
            sequence_map["frametypes"],
            server_default=sequence_map["frametypes"].next_value(),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "lightcurvetypes",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "id",
            sa.SmallInteger(),
            sequence_map["lightcurvetypes"],
            server_default=sequence_map["lightcurvetypes"].next_value(),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "orbits",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "id",
            sa.SmallInteger(),
            sequence_map["orbits"],
            server_default=sequence_map["orbits"].next_value(),
            nullable=False,
        ),
        sa.Column("orbit_number", sa.SmallInteger(), nullable=False),
        sa.Column("sector", sa.SmallInteger(), nullable=False),
        sa.Column(
            "right_ascension", postgresql.DOUBLE_PRECISION(), nullable=False
        ),
        sa.Column(
            "declination", postgresql.DOUBLE_PRECISION(), nullable=False
        ),
        sa.Column("roll", postgresql.DOUBLE_PRECISION(), nullable=False),
        sa.Column(
            "quaternion_x", postgresql.DOUBLE_PRECISION(), nullable=False
        ),
        sa.Column(
            "quaternion_y", postgresql.DOUBLE_PRECISION(), nullable=False
        ),
        sa.Column(
            "quaternion_z", postgresql.DOUBLE_PRECISION(), nullable=False
        ),
        sa.Column(
            "quaternion_q", postgresql.DOUBLE_PRECISION(), nullable=False
        ),
        sa.Column("crm", sa.Boolean(), nullable=False),
        sa.Column("crm_n", sa.SmallInteger(), nullable=False),
        sa.Column("basename", sa.String(length=256), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("orbit_number"),
    )
    op.create_table(
        "qlpstages",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "id",
            sa.Integer(),
            sequence_map["qlpstages"],
            server_default=sequence_map["qlpstages"].next_value(),
            nullable=False,
        ),
        sa.Column("slug", sa.String(length=64), nullable=True),
        sa.Column("name", sa.String(length=64), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("slug"),
    )
    op.create_table(
        "spacecraftephemeris",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "id",
            sa.Integer(),
            sequence_map["spacecraftephemeris"],
            server_default=sequence_map["spacecraftephemeris"].next_value(),
            nullable=False,
        ),
        sa.Column("barycentric_dynamical_time", sa.Float(), nullable=True),
        sa.Column("calendar_date", sa.DateTime(), nullable=True),
        sa.Column(
            "x_coordinate", postgresql.DOUBLE_PRECISION(), nullable=True
        ),
        sa.Column(
            "y_coordinate", postgresql.DOUBLE_PRECISION(), nullable=True
        ),
        sa.Column(
            "z_coordinate", postgresql.DOUBLE_PRECISION(), nullable=True
        ),
        sa.Column(
            "light_travel_time", postgresql.DOUBLE_PRECISION(), nullable=True
        ),
        sa.Column("range_to", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("range_rate", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("barycentric_dynamical_time"),
    )
    op.create_index(
        op.f("ix_spacecraftephemeris_calendar_date"),
        "spacecraftephemeris",
        ["calendar_date"],
        unique=False,
    )
    op.create_table(
        "array_orbit_lightcurves",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("tic_id", sa.BigInteger(), nullable=False),
        sa.Column("camera", sa.SmallInteger(), nullable=False),
        sa.Column("ccd", sa.SmallInteger(), nullable=False),
        sa.Column("orbit_id", sa.SmallInteger(), nullable=False),
        sa.Column("aperture_id", sa.SmallInteger(), nullable=False),
        sa.Column("lightcurve_type_id", sa.SmallInteger(), nullable=False),
        sa.Column(
            "cadences",
            postgresql.ARRAY(sa.BigInteger(), dimensions=1),
            nullable=True,
        ),
        sa.Column(
            "barycentric_julian_dates",
            postgresql.ARRAY(sa.Float(), dimensions=1),
            nullable=True,
        ),
        sa.Column(
            "data",
            postgresql.ARRAY(postgresql.DOUBLE_PRECISION(), dimensions=1),
            nullable=True,
        ),
        sa.Column(
            "errors",
            postgresql.ARRAY(postgresql.DOUBLE_PRECISION(), dimensions=1),
            nullable=True,
        ),
        sa.Column(
            "x_centroids",
            postgresql.ARRAY(sa.Float(), dimensions=1),
            nullable=True,
        ),
        sa.Column(
            "y_centroids",
            postgresql.ARRAY(sa.Float(), dimensions=1),
            nullable=True,
        ),
        sa.Column(
            "quality_flags",
            postgresql.ARRAY(sa.Integer(), dimensions=1),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["aperture_id"],
            ["apertures.id"],
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["lightcurve_type_id"],
            ["lightcurvetypes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["orbit_id"], ["orbits.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint(
            "tic_id",
            "camera",
            "ccd",
            "orbit_id",
            "aperture_id",
            "lightcurve_type_id",
        ),
    )
    op.execute(
        "SELECT "
        "create_hypertable("
        "'array_orbit_lightcurves', "
        "'tic_id', "
        "chunk_time_interval => 10000000)"
    )
    op.create_index(
        op.f("ix_array_orbit_lightcurves_aperture_id"),
        "array_orbit_lightcurves",
        ["aperture_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_array_orbit_lightcurves_camera"),
        "array_orbit_lightcurves",
        ["camera"],
        unique=False,
    )
    op.create_index(
        op.f("ix_array_orbit_lightcurves_ccd"),
        "array_orbit_lightcurves",
        ["ccd"],
        unique=False,
    )
    op.create_index(
        op.f("ix_array_orbit_lightcurves_lightcurve_type_id"),
        "array_orbit_lightcurves",
        ["lightcurve_type_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_array_orbit_lightcurves_orbit_id"),
        "array_orbit_lightcurves",
        ["orbit_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_array_orbit_lightcurves_tic_id"),
        "array_orbit_lightcurves",
        ["tic_id"],
        unique=False,
    )
    op.create_table(
        "best_orbit_lightcurves",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "id",
            sa.BigInteger(),
            sequence_map["best_orbit_lightcurves"],
            server_default=sequence_map["best_orbit_lightcurves"].next_value(),
            nullable=False,
        ),
        sa.Column("tic_id", sa.BigInteger(), nullable=False),
        sa.Column("aperture_id", sa.SmallInteger(), nullable=True),
        sa.Column("lightcurve_type_id", sa.SmallInteger(), nullable=True),
        sa.Column("orbit_id", sa.SmallInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["aperture_id"], ["apertures.id"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(
            ["lightcurve_type_id"], ["lightcurvetypes.id"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(
            ["orbit_id"], ["orbits.id"], ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_best_orbit_lightcurves_aperture_id"),
        "best_orbit_lightcurves",
        ["aperture_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_best_orbit_lightcurves_lightcurve_type_id"),
        "best_orbit_lightcurves",
        ["lightcurve_type_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_best_orbit_lightcurves_orbit_id"),
        "best_orbit_lightcurves",
        ["orbit_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_best_orbit_lightcurves_tic_id"),
        "best_orbit_lightcurves",
        ["tic_id"],
        unique=False,
    )
    op.create_table(
        "frames",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "id",
            sa.Integer(),
            sequence_map["frames"],
            server_default=sequence_map["frames"].next_value(),
            nullable=False,
        ),
        sa.Column("cadence_type", sa.SmallInteger(), nullable=False),
        sa.Column("camera", sa.SmallInteger(), nullable=False),
        sa.Column("ccd", sa.SmallInteger(), nullable=True),
        sa.Column("cadence", sa.Integer(), nullable=False),
        sa.Column("gps_time", postgresql.DOUBLE_PRECISION(), nullable=False),
        sa.Column("start_tjd", postgresql.DOUBLE_PRECISION(), nullable=False),
        sa.Column("mid_tjd", postgresql.DOUBLE_PRECISION(), nullable=False),
        sa.Column("end_tjd", postgresql.DOUBLE_PRECISION(), nullable=False),
        sa.Column("exp_time", postgresql.DOUBLE_PRECISION(), nullable=False),
        sa.Column("quality_bit", sa.Boolean(), nullable=False),
        sa.Column("file_path", sa.String(), nullable=False),
        sa.Column("orbit_id", sa.Integer(), nullable=False),
        sa.Column("frame_type_id", sa.String(length=64), nullable=False),
        sa.CheckConstraint(
            "(ccd IS NULL) OR (ccd BETWEEN 1 AND 4)",
            name="physical_ccd_constraint",
        ),
        sa.CheckConstraint(
            "camera BETWEEN 1 and 4", name="physical_camera_constraint"
        ),
        sa.ForeignKeyConstraint(
            ["frame_type_id"], ["frametypes.name"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(
            ["orbit_id"], ["orbits.id"], ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("file_path"),
        sa.UniqueConstraint(
            "frame_type_id",
            "orbit_id",
            "cadence",
            "camera",
            "ccd",
            name="unique_frame",
        ),
    )
    op.create_index(
        op.f("ix_frames_cadence"), "frames", ["cadence"], unique=False
    )
    op.create_index(
        op.f("ix_frames_cadence_type"),
        "frames",
        ["cadence_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_frames_camera"), "frames", ["camera"], unique=False
    )
    op.create_index(op.f("ix_frames_ccd"), "frames", ["ccd"], unique=False)
    op.create_index(
        op.f("ix_frames_frame_type_id"),
        "frames",
        ["frame_type_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_frames_orbit_id"), "frames", ["orbit_id"], unique=False
    )
    op.create_table(
        "qlpprocesses",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "id",
            sa.Integer(),
            sequence_map["qlpprocesses"],
            server_default=sequence_map["qlpprocesses"].next_value(),
            nullable=False,
        ),
        sa.Column("stage_id", sa.Integer(), nullable=False),
        sa.Column("lcdb_version", sa.String(length=32), nullable=True),
        sa.Column(
            "process_start",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("process_completion", sa.DateTime(), nullable=True),
        sa.Column("state", sa.String(length=64), nullable=True),
        sa.Column(
            "runtime_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("host", sa.String(length=64), nullable=True),
        sa.Column("user", sa.String(length=64), nullable=True),
        sa.ForeignKeyConstraint(
            ["stage_id"],
            ["qlpstages.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_qlpprocesses_host"), "qlpprocesses", ["host"], unique=False
    )
    op.create_index(
        op.f("ix_qlpprocesses_lcdb_version"),
        "qlpprocesses",
        ["lcdb_version"],
        unique=False,
    )
    op.create_index(
        op.f("ix_qlpprocesses_process_completion"),
        "qlpprocesses",
        ["process_completion"],
        unique=False,
    )
    op.create_index(
        op.f("ix_qlpprocesses_process_start"),
        "qlpprocesses",
        ["process_start"],
        unique=False,
    )
    op.create_index(
        op.f("ix_qlpprocesses_runtime_parameters"),
        "qlpprocesses",
        ["runtime_parameters"],
        unique=False,
    )
    op.create_index(
        op.f("ix_qlpprocesses_state"), "qlpprocesses", ["state"], unique=False
    )
    op.create_index(
        op.f("ix_qlpprocesses_user"), "qlpprocesses", ["user"], unique=False
    )
    op.create_table(
        "qlpoperations",
        sa.Column(
            "created_on",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "id",
            sa.BigInteger(),
            sequence_map["qlpoperations"],
            server_default=sequence_map["qlpoperations"].next_value(),
            nullable=False,
        ),
        sa.Column("process_id", sa.Integer(), nullable=False),
        sa.Column("job_size", sa.BigInteger(), nullable=False),
        sa.Column("unit", sa.String(length=32), nullable=False),
        sa.Column("time_start", sa.DateTime(), nullable=False),
        sa.Column("time_end", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["process_id"],
            ["qlpprocesses.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_qlpoperations_time_end"),
        "qlpoperations",
        ["time_end"],
        unique=False,
    )
    op.create_index(
        op.f("ix_qlpoperations_time_start"),
        "qlpoperations",
        ["time_start"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_qlpoperations_time_start"), table_name="qlpoperations"
    )
    op.drop_index(
        op.f("ix_qlpoperations_time_end"), table_name="qlpoperations"
    )
    op.drop_table("qlpoperations")
    op.drop_index(op.f("ix_qlpprocesses_user"), table_name="qlpprocesses")
    op.drop_index(op.f("ix_qlpprocesses_state"), table_name="qlpprocesses")
    op.drop_index(
        op.f("ix_qlpprocesses_runtime_parameters"), table_name="qlpprocesses"
    )
    op.drop_index(
        op.f("ix_qlpprocesses_process_start"), table_name="qlpprocesses"
    )
    op.drop_index(
        op.f("ix_qlpprocesses_process_completion"), table_name="qlpprocesses"
    )
    op.drop_index(
        op.f("ix_qlpprocesses_lcdb_version"), table_name="qlpprocesses"
    )
    op.drop_index(op.f("ix_qlpprocesses_host"), table_name="qlpprocesses")
    op.drop_table("qlpprocesses")
    op.drop_index(op.f("ix_frames_orbit_id"), table_name="frames")
    op.drop_index(op.f("ix_frames_frame_type_id"), table_name="frames")
    op.drop_index(op.f("ix_frames_ccd"), table_name="frames")
    op.drop_index(op.f("ix_frames_camera"), table_name="frames")
    op.drop_index(op.f("ix_frames_cadence_type"), table_name="frames")
    op.drop_index(op.f("ix_frames_cadence"), table_name="frames")
    op.drop_table("frames")
    op.drop_index(
        op.f("ix_best_orbit_lightcurves_tic_id"),
        table_name="best_orbit_lightcurves",
    )
    op.drop_index(
        op.f("ix_best_orbit_lightcurves_orbit_id"),
        table_name="best_orbit_lightcurves",
    )
    op.drop_index(
        op.f("ix_best_orbit_lightcurves_lightcurve_type_id"),
        table_name="best_orbit_lightcurves",
    )
    op.drop_index(
        op.f("ix_best_orbit_lightcurves_aperture_id"),
        table_name="best_orbit_lightcurves",
    )
    op.drop_table("best_orbit_lightcurves")
    op.drop_index(
        op.f("ix_array_orbit_lightcurves_tic_id"),
        table_name="array_orbit_lightcurves",
    )
    op.drop_index(
        op.f("ix_array_orbit_lightcurves_orbit_id"),
        table_name="array_orbit_lightcurves",
    )
    op.drop_index(
        op.f("ix_array_orbit_lightcurves_lightcurve_type_id"),
        table_name="array_orbit_lightcurves",
    )
    op.drop_index(
        op.f("ix_array_orbit_lightcurves_ccd"),
        table_name="array_orbit_lightcurves",
    )
    op.drop_index(
        op.f("ix_array_orbit_lightcurves_camera"),
        table_name="array_orbit_lightcurves",
    )
    op.drop_index(
        op.f("ix_array_orbit_lightcurves_aperture_id"),
        table_name="array_orbit_lightcurves",
    )
    op.drop_table("array_orbit_lightcurves")
    op.drop_index(
        op.f("ix_spacecraftephemeris_calendar_date"),
        table_name="spacecraftephemeris",
    )
    op.drop_table("spacecraftephemeris")
    op.drop_table("qlpstages")
    op.drop_table("orbits")
    op.drop_table("lightcurvetypes")
    op.drop_table("frametypes")
    op.drop_index(
        op.f("ix_camera_quaternions_date"), table_name="camera_quaternions"
    )
    op.drop_index(
        op.f("ix_camera_quaternions_camera"), table_name="camera_quaternions"
    )
    op.drop_table("camera_quaternions")
    op.drop_table("apertures")

    for sequence in define_sequences().values():
        op.execute(DropSequence(sequence))
    # ### end Alembic commands ###
